# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    - run: npm run lint
    
  push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USER }}/simpsons-trivia:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DATABASEUSER=${{ secrets.DATABASEUSER }}
            DATABASEPASS=${{ secrets.DATABASEPASS }}
            DATABASEHOST=${{ secrets.DATABASEHOST }}
            DATABASEPORT=${{ secrets.DATABASEPORT }}
            DATABASENAME=${{ secrets.DATABASENAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CONNECTPOSTGRES=${{ secrets.CONNECTPOSTGRES }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            
#  deploy_render:
    # Render config
#    runs-on: ubuntu-latest
#    needs: push_to_docker_hub
    
#    steps:
#      - name: Deploy to Render
#        # Only run this step if the branch is master
#        if : github.ref == 'refs/heads/master'
#        env:
          #Example url for deploy https://api.render.com/deploy/srv-XXYYZZ?key=AABBCC&imgURL=docker.io%2Flibrary%2Fnginx%401.24
#          deploy_url: ${{ secrets.RENDER_DEPLOY_HOOK_URL } }&imgURL=docker.io/tomisr/simpsons-trivia:${{ github.sha } }
#        run: |
#          curl "$deploy_url"

  deploy_flyio:
      # Fly.io config
      name: Deploy to Fly.io
      runs-on: ubuntu-latest
      needs: push_to_docker_hub
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'

      steps:
        - uses: actions/checkout@v4
        - uses: superfly/flyctl-actions/setup-flyctl@master
        - name: Deploy to Fly.io
          env:
            FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          run: flyctl deploy --image ${{ secrets.DOCKER_USER }}/simpsons-trivia:${{ github.sha }}